name: Deploy to S3

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write # for GitHub OIDC
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  S3_BUCKET: ${{ vars.S3_BUCKET }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
  LAMBDA_FUNCTION_NAME: ${{ vars.LAMBDA_FUNCTION_NAME }}
  TABLE_NAME: ${{ vars.TABLE_NAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci || npm install

      - name: Generate assets (optional)
        run: |
          npm run generate-snapadile-assets --if-present
          npm run generate-car-crash-assets --if-present
          npm run generate-sitemap --if-present

      - name: Build
        run: npm run build-nolog
        env:
          VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync site to S3
        if: ${{ env.S3_BUCKET != '' }}
        run: |
          aws s3 sync ./dist s3://${{ env.S3_BUCKET }} --delete --follow-symlinks

      # Set long-cache headers for hashed assets (Vite outputs hashed filenames)
      - name: Cache-control for static assets
        if: ${{ env.S3_BUCKET != '' }}
        run: |
          if [ -d "dist/assets" ]; then
            aws s3 cp ./dist/assets s3://${{ env.S3_BUCKET }}/assets \
              --recursive \
              --metadata-directive REPLACE \
              --cache-control "public, max-age=31536000, immutable"
          fi

      # Ensure HTML entry points are not cached by browsers/CDN
      - name: Set Cache-Control for index.html
        if: ${{ env.S3_BUCKET != '' }}
        run: |
          aws s3 cp s3://${{ env.S3_BUCKET }}/index.html s3://${{ env.S3_BUCKET }}/index.html \
            --metadata-directive REPLACE \
            --cache-control "no-store, no-cache, must-revalidate, max-age=0" \
            --content-type text/html

      - name: Invalidate CloudFront cache (optional)
        if: ${{ env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      # --- Backend (Lambda) deploy ---
      - name: Build backend (Lambda)
        working-directory: app
        run: |
          npm ci || npm install
          npm run build

      - name: Package Lambda bundle
        if: ${{ env.LAMBDA_FUNCTION_NAME != '' }}
        working-directory: app
        run: |
          rm -f bundle.zip
          zip -r bundle.zip dist node_modules package.json package-lock.json

      - name: Deploy Lambda code
        if: ${{ env.LAMBDA_FUNCTION_NAME != '' }}
        working-directory: app
        run: |
          aws lambda update-function-code \
            --function-name "${{ env.LAMBDA_FUNCTION_NAME }}" \
            --zip-file fileb://bundle.zip

      - name: (Optional) Update Lambda env
        if: ${{ env.LAMBDA_FUNCTION_NAME != '' && env.TABLE_NAME != '' }}
        run: |
          aws lambda update-function-configuration \
            --function-name "${{ env.LAMBDA_FUNCTION_NAME }}" \
            --environment "Variables={TABLE_NAME=${{ env.TABLE_NAME }},AWS_NODEJS_CONNECTION_REUSE_ENABLED=1}"
